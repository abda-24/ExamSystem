CREATE DATABASE ExamSystem;
use ExamSystem

-- Creating Students Table
CREATE TABLE Students (
    student_id INT PRIMARY KEY IDENTITY(1,1),  -- Auto increment student ID
    name NVARCHAR(100),  -- Student's full name
    date_of_birth DATE,  -- Date of birth
    email NVARCHAR(100),  -- Student's email address
    intake NVARCHAR(50),  -- The intake year/semester
    branch NVARCHAR(50),  -- Branch of the student
    track NVARCHAR(50)  -- Track or specialization the student is following
);


-- Creating Instructors Table
CREATE TABLE Instructors (
    instructor_id INT PRIMARY KEY IDENTITY(1,1),  -- Auto increment instructor ID
    name NVARCHAR(100),  -- Instructor's name
    email NVARCHAR(100),  -- Instructor's email address
    phone NVARCHAR(50),  -- Instructor's phone number
    department NVARCHAR(50)  -- Department where the instructor teaches
);


-- Creating Courses Table
CREATE TABLE Courses (
    course_id INT PRIMARY KEY IDENTITY(1,1),  -- Auto increment course ID
    course_name NVARCHAR(100),  -- Name of the course
    description NVARCHAR(255),  -- Short description about the course
    max_degree INT,  -- Maximum grade for the course
    min_degree INT  -- Minimum passing grade for the course
);


-- Creating Question Pool Table
CREATE TABLE Question_Pool (
    question_id INT PRIMARY KEY IDENTITY(1,1),  -- Auto increment question ID
    question_text NVARCHAR(255),  -- The text of the question
    question_type NVARCHAR(50),  -- Type of question (MCQ, True/False, Text)
    correct_answer NVARCHAR(255),  -- Correct answer (For MCQ and True/False)
    best_answer NVARCHAR(255)  -- Best answer for text questions
);


-- Creating Exams Table
CREATE TABLE Exams (
    exam_id INT PRIMARY KEY IDENTITY(1,1),  -- Auto increment exam ID
    exam_type NVARCHAR(50),  -- Exam type (Exam or Corrective)
    course_id INT,  -- Foreign Key to the Courses table
    instructor_id INT,  -- Foreign Key to the Instructors table
    exam_date DATE,  -- Date of the exam
    start_time TIME,  -- Start time of the exam
    end_time TIME,  -- End time of the exam
    total_time INT,  -- Duration of the exam in minutes
    allowance_options NVARCHAR(255),  -- Any extra options allowed for the exam
    FOREIGN KEY (course_id) REFERENCES Courses(course_id),  -- Link to the Courses table
    FOREIGN KEY (instructor_id) REFERENCES Instructors(instructor_id)  -- Link to the Instructors table
);


-- Creating Student Answers Table
CREATE TABLE Student_Answers (
    answer_id INT PRIMARY KEY IDENTITY(1,1),  -- Auto increment answer ID
    exam_id INT,  -- Foreign Key to the Exams table
    student_id INT,  -- Foreign Key to the Students table
    question_id INT,  -- Foreign Key to the Question_Pool table
    answer_text NVARCHAR(255),  -- Textual answer provided by the student
    correctness BIT,  -- Whether the answer is correct (1) or incorrect (0)
    FOREIGN KEY (exam_id) REFERENCES Exams(exam_id),  -- Link to the Exams table
    FOREIGN KEY (student_id) REFERENCES Students(student_id),  -- Link to the Students table
    FOREIGN KEY (question_id) REFERENCES Question_Pool(question_id)  -- Link to the Question_Pool table
);


-- Creating Exam Question Table (Many-to-Many Relationship)
CREATE TABLE Exam_Question (
    exam_id INT,  -- Foreign Key to the Exams table
    question_id INT,  -- Foreign Key to the Question_Pool table
    degree INT,  -- Degree assigned to the question in the exam
    PRIMARY KEY (exam_id, question_id),  -- Composite primary key
    FOREIGN KEY (exam_id) REFERENCES Exams(exam_id),  -- Link to the Exams table
    FOREIGN KEY (question_id) REFERENCES Question_Pool(question_id)  -- Link to the Question_Pool table
);


-- Creating Training Manager Table
CREATE TABLE Training_Manager (
    manager_id INT PRIMARY KEY IDENTITY(1,1),  -- Auto increment manager ID
    name NVARCHAR(100),  -- Name of the training manager
    email NVARCHAR(100),  -- Email address
    phone NVARCHAR(50)  -- Phone number
);




-- Inserting sample data into Students Table (10 entries)
INSERT INTO Students (name, date_of_birth, email, intake, branch, track)
VALUES 
('Ahmed Mohamed', '2000-01-15', 'ahmed1@gmail.com', '2024', 'CS', 'AI'),
('Mona Ali', '1999-10-10', 'mona1@gmail.com', '2024', 'CS', 'Web Development'),
('Omar Hassan', '2000-04-20', 'omar2@gmail.com', '2024', 'CS', 'AI'),
('Fatma Youssef', '1998-12-05', 'fatma3@gmail.com', '2023', 'IT', 'Cloud Computing'),
('Ali Tarek', '2001-08-12', 'ali4@gmail.com', '2024', 'CS', 'Web Development'),
('Yasmin Kareem', '1997-07-30', 'yasmin5@gmail.com', '2023', 'CS', 'Cyber Security'),
('Mohamed Samir', '2002-05-22', 'mohamed6@gmail.com', '2024', 'CS', 'AI'),
('Sara Ahmed', '1999-11-01', 'sara7@gmail.com', '2024', 'IT', 'Cloud Computing'),
('Hassan Reda', '2000-02-15', 'hassan8@gmail.com', '2024', 'CS', 'Data Science'),
('Nour Mostafa', '2001-09-18', 'nour9@gmail.com', '2024', 'CS', 'Web Development');


---  Creating results Table
CREATE TABLE Results (
    result_id INT PRIMARY KEY IDENTITY,
    student_id INT,
    exam_id INT,
    score INT,
    FOREIGN KEY (student_id) REFERENCES Students(student_id),
    FOREIGN KEY (exam_id) REFERENCES Exams(exam_id)
);



-- Inserting sample data into Instructors Table (10 entries)
INSERT INTO Instructors (name, email, phone, department)
VALUES 
('Dr. Khaled', 'khaled@university.com', '0123456789', 'Computer Science'),
('Prof. Sara', 'sara@university.com', '0987654321', 'Computer Science'),
('Dr. Ali', 'ali@university.com', '0151234567', 'Information Technology'),
('Prof. Mona', 'mona@university.com', '0102345678', 'Cyber Security'),
('Dr. Tarek', 'tarek@university.com', '0112345678', 'Computer Science'),
('Prof. Yasmin', 'yasmin@university.com', '0123456780', 'Information Technology'),
('Dr. Mohamed', 'mohamed@university.com', '0123456781', 'Artificial Intelligence'),
('Prof. Samir', 'samir@university.com', '0109876543', 'Cyber Security'),
('Dr. Reda', 'reda@university.com', '0159876543', 'Data Science'),
('Prof. Nour', 'nour@university.com', '0112345679', 'Computer Science');


-- Inserting sample data into Courses Table (10 entries)
INSERT INTO Courses (course_name, description, max_degree, min_degree)
VALUES 
('Database Systems', 'Learn about databases', 100, 50),
('Web Development', 'Learn web development techniques', 100, 60),
('Artificial Intelligence', 'Introduction to AI and machine learning', 100, 70),
('Data Science', 'Data analysis and visualization techniques', 100, 60),
('Cyber Security', 'Principles of network security', 100, 75),
('Cloud Computing', 'Learn about cloud services and infrastructure', 100, 50),
('Software Engineering', 'Software development life cycle', 100, 65),
('Human-Computer Interaction', 'Study of user interfaces and user experience', 100, 60),
('Networks and Communication', 'Learn about networking protocols and communication', 100, 50),
('Operating Systems', 'Fundamentals of OS and system programming', 100, 55);




-- Inserting sample data into Question Pool Table (10 entries)
INSERT INTO Question_Pool (question_text, question_type, correct_answer, best_answer)
VALUES 
('What is SQL?', 'Text', NULL, 'SQL is a language used for managing databases'),
('Is SQL case sensitive?', 'True/False', 'False', NULL),
('What does API stand for?', 'MCQ', 'Application Programming Interface', NULL),
('What is the difference between GET and POST methods?', 'Text', NULL, 'GET retrieves data, POST sends data to the server'),
('What is a JOIN in SQL?', 'Text', NULL, 'JOIN is used to combine rows from two or more tables'),
('What is the purpose of a primary key in a database?', 'Text', NULL, 'A primary key uniquely identifies each record in a table'),
('What is the full form of HTML?', 'MCQ', 'HyperText Markup Language', NULL),
('Explain polymorphism in object-oriented programming', 'Text', NULL, 'Polymorphism allows objects of different classes to be treated as objects of a common superclass'),
('What is the difference between PUT and PATCH methods?', 'Text', NULL, 'PUT updates or creates resources, while PATCH modifies resources partially'),
('What is the difference between a stack and a queue?', 'MCQ', 'A stack is LIFO, and a queue is FIFO', NULL);




-- Inserting sample data into Exams Table (10 entries)
INSERT INTO Exams (exam_type, course_id, instructor_id, exam_date, start_time, end_time, total_time, allowance_options)
VALUES 
('Final', 1, 1, '2024-06-15', '09:00', '12:00', 180, 'None'),
('Midterm', 2, 2, '2024-05-20', '10:00', '12:00', 120, 'None'),
('Final', 3, 3, '2024-06-25', '08:00', '11:00', 180, 'None'),
('Midterm', 4, 4, '2024-05-22', '14:00', '16:00', 120, 'None'),
('Final', 5, 5, '2024-06-10', '13:00', '16:00', 180, 'None'),
('Midterm', 6, 6, '2024-05-18', '09:00', '11:00', 120, 'None'),
('Final', 7, 7, '2024-06-30', '08:00', '11:00', 180, 'None'),
('Midterm', 8, 8, '2024-05-25', '15:00', '17:00', 120, 'None'),
('Final', 9, 9, '2024-06-17', '11:00', '14:00', 180, 'None'),
('Midterm', 10, 10, '2024-05-28', '16:00', '18:00', 120, 'None');




-- Inserting sample data into Student Answers Table (10 entries)
INSERT INTO Student_Answers (exam_id, student_id, question_id, answer_text, correctness)
VALUES 
(1, 1, 1, 'SQL stands for Structured Query Language', 1),
(2, 2, 2, 'False', 1),
(3, 3, 3, 'API stands for Application Programming Interface', 1),
(4, 4, 4, 'GET retrieves data from the server and POST sends data to the server', 1),
(5, 5, 5, 'JOIN is used to combine data from multiple tables based on a related column', 1),
(6, 6, 6, 'A primary key uniquely identifies each row in a table', 1),
(7, 7, 7, 'HTML stands for HyperText Markup Language', 1),
(8, 8, 8, 'Polymorphism allows a single entity to take multiple forms', 1),
(9, 9, 9, 'PUT replaces data while PATCH only modifies part of the resource', 1),
(10, 10, 10, 'Stack follows Last In First Out (LIFO) and Queue follows First In First Out (FIFO)', 1);






-- Inserting sample data into Exam Question Table (10 entries)
INSERT INTO Exam_Question (exam_id, question_id, degree)
VALUES 
(1, 1, 10),
(1, 2, 10),
(2, 3, 15),
(2, 4, 15),
(3, 5, 20),
(3, 6, 20),
(4, 7, 25),
(4, 8, 25),
(5, 9, 30),
(5, 10, 30);





-- Inserting sample data into Training Manager Table (10 entries)
INSERT INTO Training_Manager (name, email, phone)
VALUES 
('Ali Ibrahim', 'ali.ibrahim@university.com', '0101111222'),
('Mona Mahmoud', 'mona.mahmoud@university.com', '0102333444'),
('Hassan Fathi', 'hassan.fathi@university.com', '0104556677'),
('Sara Adel', 'sara.adel@university.com', '0107894561'),
('Khaled Elshorbagy', 'khaled.elshorbagy@university.com', '0101234567'),
('Omar Hossam', 'omar.hossam@university.com', '0103456789'),
('Nour Magdy', 'nour.magdy@university.com', '0104567890'),
('Fatma Ahmed', 'fatma.ahmed@university.com', '0106789012'),
('Tarek Reda', 'tarek.reda@university.com', '0107890123'),
('Yasmin Mohamed', 'yasmin.mohamed@university.com', '0108901234');



-- Create stored procedure to add a new student
go
CREATE PROCEDURE AddNewStudent
    @name VARCHAR(100),
    @date_of_birth DATE,
    @email VARCHAR(100),
    @intake VARCHAR(10),
    @branch VARCHAR(50),
    @track VARCHAR(50)
AS
BEGIN
    -- Insert the new student record into the Students table
    INSERT INTO Students (name, date_of_birth, email, intake, branch, track)
    VALUES (@name, @date_of_birth, @email, @intake, @branch, @track);
END;
GO

EXEC AddNewStudent 
    @name = 'Mohamed Ali', 
    @date_of_birth = '2000-03-22', 
    @email = 'mohamed.ali@gmail.com', 
    @intake = '2024', 
    @branch = 'CS', 
    @track = 'Software Engineering';






	-- Create stored procedure to add a new course
	go
CREATE PROCEDURE AddNewCourse
    @course_name VARCHAR(100),
    @description TEXT,
    @max_degree INT,
    @min_degree INT
AS
BEGIN
    -- Insert the new course record into the Courses table
    INSERT INTO Courses (course_name, description, max_degree, min_degree)
    VALUES (@course_name, @description, @max_degree, @min_degree);
END;
GO

EXEC AddNewCourse 
    @course_name = 'Advanced Databases', 
    @description = 'This course covers advanced topics in databases.',
    @max_degree = 100, 
    @min_degree = 50;



	-- Create stored procedure to create a new exam for a course
	Go
CREATE PROCEDURE CreateExam
    @course_id INT,
    @exam_type VARCHAR(50),
    @start_time DATETIME,
    @end_time DATETIME,
    @total_time INT
AS
BEGIN
    -- Insert the exam details into the Exams table
    INSERT INTO Exams (course_id, exam_type, start_time, end_time, total_time)
    VALUES (@course_id, @exam_type, @start_time, @end_time, @total_time);
END;
GO



EXEC CreateExam 
    @course_id = 1, 
    @exam_type = 'Final', 
    @start_time = '2024-12-25 10:00:00', 
    @end_time = '2024-12-25 12:00:00', 
    @total_time = 120

	-- Create stored procedure to record a student's answer for an exam
	Go
CREATE PROCEDURE RecordStudentAnswer
    @student_id INT,
    @exam_id INT,
    @question_id INT,
    @answer VARCHAR(MAX)
AS
BEGIN
    -- Insert the student's answer into the Exam_Answers table
    INSERT INTO Exam_Answers (student_id, exam_id, question_id, answer)
    VALUES (@student_id, @exam_id, @question_id, @answer);
END;


GO

---- Creating view StudentResults Table
CREATE VIEW StudentResults AS
SELECT 
    S.student_id, 
    S.name AS student_name, 
    E.exam_id, 
    R.score
FROM Students S
JOIN Results R ON S.student_id = R.student_id
JOIN Exams E ON R.exam_id = E.exam_id;


go

Go
CREATE VIEW StudentResults AS
SELECT 
    S.student_id, 
    E.exam_id, 
    R.score
FROM Students S
JOIN Results R ON S.student_id = R.student_id
JOIN Exams E ON R.exam_id = E.exam_id;

go






-- Query to check if the table 'Exam_Answers' exists in the database
SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Exam_Answers';

-- Creating indexes to improve performance on frequently queried columns
CREATE INDEX idx_student_name ON Students (name);  -- Index for student names in the Students table
CREATE INDEX idx_exam_date ON Exams (exam_date);  -- Index for exam dates in the Exams table
CREATE INDEX idx_instructor_name ON Instructors (name);  -- Index for instructor names in the Instructors table
CREATE INDEX idx_course_name ON Courses (course_name);  -- Index for course names in the Courses table

-- Creating login accounts for users
CREATE LOGIN admin_user WITH PASSWORD = 'admin123';  -- Create login for admin user
CREATE LOGIN instructor_user WITH PASSWORD = 'instructor123';  -- Create login for instructor user
CREATE LOGIN student_user WITH PASSWORD = 'student123';  -- Create login for student user

-- Creating users associated with login accounts
CREATE USER admin_user FOR LOGIN admin_user;  -- Create user for the admin login
CREATE USER training_manager FOR LOGIN training_manager;  -- Create user for the training manager login
CREATE USER instructor_user FOR LOGIN instructor_user;  -- Create user for the instructor login
CREATE USER student_user FOR LOGIN student_user;  -- Create user for the student login

-- Granting appropriate permissions to users
GRANT SELECT, INSERT, UPDATE, DELETE ON Students TO admin_user;  -- Grant full permissions on Students table to admin
GRANT SELECT, INSERT, UPDATE ON Exams TO training_manager;  -- Grant limited permissions on Exams table to training manager
GRANT SELECT, INSERT ON Results TO instructor_user;  -- Grant limited permissions on Results table to instructor
GRANT SELECT ON Results TO student_user;  -- Grant read-only permissions on Results table to student

-- Inserting test data into the tables
INSERT INTO Students (name, date_of_birth, email, intake, branch, track)
VALUES ('John Doe', '2000-01-01', 'john.doe@example.com', 'Fall 2024', 'Computer Science', 'AI');  -- Insert a student record

INSERT INTO Instructors (name, email, phone, department)
VALUES ('Dr. Smith', 'dr.smith@example.com', '123-456-7890', 'AI Department');  -- Insert an instructor record

INSERT INTO Courses (course_name, description, max_degree, min_degree)
VALUES ('AI 101', 'Introduction to Artificial Intelligence', 100, 50);  -- Insert a course record

INSERT INTO Question_Pool (question_text, question_type, correct_answer, best_answer)
VALUES ('What is AI?', 'Multiple Choice', 'Artificial Intelligence', 'Study of intelligent agents.');  -- Insert a question into the question pool

INSERT INTO Exams (exam_type, course_id, instructor_id, exam_date, start_time, end_time, total_time, allowance_options)
VALUES ('Final', 1, 1, '2024-06-15', '10:00', '12:00', 120, 'Extra time for students with disabilities');  -- Insert an exam record

-- Performing a full database backup
BACKUP DATABASE ExamSystem
TO DISK = 'C:\data\TrainingDBBackup.bak'
WITH FORMAT,  -- Format the backup file
     MEDIANAME = 'TrainingDBBackup',
     NAME = 'Full Backup of TrainingDB';  -- Name the backup as 'Full Backup of TrainingDB'
